@Library('my-sharedlib@main') _

node {
  properties([
    parameters([
      string(name: 'REGISTRY', defaultValue: 'docker.io'),
      string(name: 'REGISTRY_NS', defaultValue: 'manarmosa'),
      string(name: 'IMAGE_NAME', defaultValue: 'java-app-scribtedversion'),
      string(name: 'IMAGE_TAG', defaultValue: "build-${env.BUILD_NUMBER}")
    ])
  ])

  env.IMAGE_REF = "${params.REGISTRY}/${params.REGISTRY_NS}/${params.IMAGE_NAME}:${params.IMAGE_TAG}"

  stage('Checkout') {
    checkout([$class: 'GitSCM', branches: [[name: "*/main"]],
      userRemoteConfigs: [[url: "https://github.com/manarmosa243/DataEngineering.git"]]])
  }

  stage('Check Repository Structure') {
    sh 'ls -R'
  }

  stage('Build & Test (Parallel)') {
    dir('DataEngineering') {
      parallel(
        'Test JAR Exists': {
          sh 'if [ -f target/*.jar ]; then echo "JAR is here"; else echo "No JAR found"; fi'
        },
        'Build JAR': {
          sh 'mvn clean package -DskipTests'
        }
      )
      archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
    }
  }

  stage('Build Docker Image') {
    dir('DataEngineering') {
      dockerUtils.buildImage(".", env.IMAGE_REF)
    }
  }

  stage('Login to Docker Hub & Push') {
    withDockerRegistry(url: "https://${params.REGISTRY}", credentialsId: 'dockerHub') {
      dockerUtils.pushImage(env.IMAGE_REF)
    }
  }

  stage('Cleanup Workspace') {
    deleteDir()
  }
}
