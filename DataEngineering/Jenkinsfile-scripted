@Library('my-sharedlib@master') _

node {
  properties([parameters([
    string(name: 'REGISTRY', defaultValue: 'docker.io'),
    string(name: 'REGISTRY_NS', defaultValue: 'manarmosa'),   // your DockerHub username
    string(name: 'IMAGE_NAME', defaultValue: 'dataengineering-app'), // your image name
    string(name: 'IMAGE_TAG', defaultValue: "build-${env.BUILD_NUMBER}")
  ])])

  env.IMAGE_REF = "${params.REGISTRY}/${params.REGISTRY_NS}/${params.IMAGE_NAME}:${params.IMAGE_TAG}"

  stage('Checkout') {
    checkout([$class: 'GitSCM', branches: [[name: "*/master"]],
      userRemoteConfigs: [[url: "https://github.com/ManarMosa/DataEngineering.git"]]])
  }

  stage('Build & Test (parallel)') {
    dir('DataEngineering') {
      parallel(
        "Test": { sh 'if [ -x ./mvnw ]; then ./mvnw -B test; else mvn -B test; fi' },
        "Compile": { sh 'if [ -x ./mvnw ]; then ./mvnw -B -DskipTests=true package; else mvn -B -DskipTests=true package; fi' }
      )
      archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
    }
  }

  stage('Docker Build') {
    dir('DataEngineering') {
      dockerUtils.buildImage(".", env.IMAGE_REF)
    }
  }

  stage('Docker Login & Push') {
    withDockerRegistry(url: "https://${params.REGISTRY}", credentialsId: 'dockerHub') {
      dockerUtils.pushImage(env.IMAGE_REF)
    }
  }

  stage('Cleanup') { deleteDir() }
}
